// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: goer/v1/goer.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoerClient is the client API for Goer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoerClient interface {
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
}

type goerClient struct {
	cc grpc.ClientConnInterface
}

func NewGoerClient(cc grpc.ClientConnInterface) GoerClient {
	return &goerClient{cc}
}

func (c *goerClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/v1.Goer/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoerServer is the server API for Goer service.
// All implementations must embed UnimplementedGoerServer
// for forward compatibility
type GoerServer interface {
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	mustEmbedUnimplementedGoerServer()
}

// UnimplementedGoerServer must be embedded to have forward compatible implementations.
type UnimplementedGoerServer struct {
}

func (UnimplementedGoerServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedGoerServer) mustEmbedUnimplementedGoerServer() {}

// UnsafeGoerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoerServer will
// result in compilation errors.
type UnsafeGoerServer interface {
	mustEmbedUnimplementedGoerServer()
}

func RegisterGoerServer(s grpc.ServiceRegistrar, srv GoerServer) {
	s.RegisterService(&Goer_ServiceDesc, srv)
}

func _Goer_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoerServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Goer/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoerServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Goer_ServiceDesc is the grpc.ServiceDesc for Goer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Goer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Goer",
	HandlerType: (*GoerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUser",
			Handler:    _Goer_ListUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goer/v1/goer.proto",
}
