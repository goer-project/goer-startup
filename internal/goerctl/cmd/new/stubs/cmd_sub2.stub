package {{.CommandName}}

import (
	"log"

	"github.com/spf13/cobra"

	"goer-startup/internal/goerctl/util/templates"
	"goer-startup/pkg/cli/genericclioptions"

	cmdutil "goer-startup/internal/goerctl/cmd/util"
)

// SubCmd2Options is an option struct to support sub2 subcommands.
type SubCmd2Options struct {
	StringOption      string
	StringSliceOption []string
	IntOption         int
	BoolOption        bool

	genericclioptions.IOStreams
}

var (
	sub2Long = templates.LongDesc({{.Dot}}A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.{{.Dot}})

	sub2Example = templates.Examples({{.Dot}}
		# Print all option values for sub2
		{{.CommandName}} sub2{{.Dot}})
)

// NewSubCmd2Options returns an initialized SubCmd2Options instance.
func NewSubCmd2Options(ioStreams genericclioptions.IOStreams) *SubCmd2Options {
	return &SubCmd2Options{
		StringOption: "default",
		IOStreams:    ioStreams,
	}
}

// NewCmdSubCmd2 returns new initialized instance of sub2 sub command.
func NewCmdSubCmd2(ioStreams genericclioptions.IOStreams) *cobra.Command {
	o := NewSubCmd2Options(ioStreams)

	cmd := &cobra.Command{
		Use:                   "sub2",
		DisableFlagsInUseLine: true,
		Aliases:               []string{"sub2"},
		Short:                 "A brief description of your command",
		TraverseChildren:      true,
		Long:                  sub2Long,
		Example:               sub2Example,
		Run: func(cmd *cobra.Command, args []string) {
			cmdutil.CheckErr(o.Complete(cmd, args))
			cmdutil.CheckErr(o.Validate(cmd, args))
			cmdutil.CheckErr(o.Run(args))
		},
		SuggestFor: []string{},
	}

	// mark flag as deprecated
	cmd.Flags().StringVarP(&o.StringOption, "string", "", o.StringOption, "String option.")
	cmd.Flags().StringSliceVar(&o.StringSliceOption, "slice", o.StringSliceOption, "String slice option.")
	cmd.Flags().IntVarP(&o.IntOption, "int", "i", o.IntOption, "Int option.")
	cmd.Flags().BoolVarP(&o.BoolOption, "bool", "b", o.BoolOption, "Bool option.")

	return cmd
}

// Complete completes all the required options.
func (o *SubCmd2Options) Complete(cmd *cobra.Command, args []string) error {
	if len(args) != 0 {
		return cmdutil.UsageErrorf(cmd, "Unexpected args: %v", args)
	}

	if o.StringOption != "" {
		o.StringOption += "(complete)"
	}

	return nil
}

// Validate makes sure there is no discrepancy in command options.
func (o *SubCmd2Options) Validate(cmd *cobra.Command, args []string) error {
	if len(o.StringOption) > maxStringLength {
		return cmdutil.UsageErrorf(cmd, "--string length must less than 18")
	}

	if o.IntOption < 0 {
		return cmdutil.UsageErrorf(cmd, "--int must be a positive integer: %v", o.IntOption)
	}

	return nil
}

// Run executes a sub2 subcommand using the specified options.
func (o *SubCmd2Options) Run(args []string) error {
	log.Println(o.Out, "The following is option values:")
	log.Println(o.Out, "==> --string: %v\n==> --slice: %v\n==> --int: %v\n==> --bool: %v\n",
		o.StringOption, o.StringSliceOption, o.IntOption, o.BoolOption)

	return nil
}
