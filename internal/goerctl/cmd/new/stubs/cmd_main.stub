package {{.CommandName}}

import (
	"log"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"

	"goer-startup/internal/goerctl/util/templates"
	"goer-startup/pkg/cli/genericclioptions"

	cmdutil "goer-startup/internal/goerctl/cmd/util"
)

const maxStringLength = 17

var (
	{{.CommandName}}Long = templates.LongDesc({{.Dot}}
	Demo command.

	This commands show you how to implement a command with two sub commands.{{.Dot}})
)

// NewCmd{{.CommandFunctionName}} returns new initialized instance of '{{.CommandName}}' sub command.
func NewCmd{{.CommandFunctionName}}(ioStreams genericclioptions.IOStreams) *cobra.Command {
	cmd := &cobra.Command{
		Use:                   "{{.CommandName}} SUBCOMMAND",
		DisableFlagsInUseLine: true,
		Short:                 "{{.CommandDescription}}",
		Long:                  {{.CommandName}}Long,
		Run:                   cmdutil.DefaultSubCommandRun(),
	}

	// add subcommands
	cmd.AddCommand(NewCmdSubCmd1(ioStreams))
	cmd.AddCommand(NewCmdSubCmd2(ioStreams))

	// persistent flag, we can get the value in subcommand via {{.Dot}}viper.Get{{.Dot}}
	cmd.PersistentFlags().StringP("persistent", "p", "this is a persistent option", "Cobra persistent option.")

	// bind flags with viper
	err := viper.BindPFlag("persistent", cmd.PersistentFlags().Lookup("persistent"))
	if err != nil {
		log.Println(err)

		return nil
	}

	return cmd
}
