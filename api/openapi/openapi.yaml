swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: Goer API
host: localhost:8080
basePath: /v1
tags:
  - name: User
    description: Operations about user
  - name: Post
    description: Operations about post
schemes:
  - http
paths:
  # Login
  /login:
    post:
      tags:
        - User
      summary: Log into the system
      description: ""
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The username for login
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'

      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/LoginResponse'
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

  /users:
    # Get user list
    get:
      tags:
        - User
      summary: List users
      operationId: listUsers
      produces:
        - application/json
      security:
        - api_key: [ ]
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
      responses:
        "200":
          description: successfully create user
          schema:
            $ref: '#/definitions/ListUserResponse'
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

    # Create user
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: "#/definitions/CreateUserRequest"
      responses:
        "200":
          description: successfully create user
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

  /users/{name}:
    # Get user
    get:
      tags:
        - User
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
        - application/json
      security:
        - api_key: [ ]
      parameters:
        - name: name
          in: path
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/UserInfo"
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

    # Update user
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      security:
        - api_key: [ ]
      parameters:
        - name: name
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: "#/definitions/UpdateUserRequest"
      responses:
        "200":
          description: successfully update user
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

    # Delete user
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
      security:
        - api_key: [ ]
      parameters:
        - name: name
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "200":
          description: successfully deleted
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

  # Change password
  /users/{name}/change-password:
    put:
      tags:
        - User
      summary: Change password
      description: Change password.
      operationId: changePassword
      produces:
        - application/json
      security:
        - api_key: [ ]
      parameters:
        - name: name
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: "#/definitions/ChangePasswordRequest"
      responses:
        "200":
          description: successfully update user
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

  # Posts
  /posts:
    # List
    get:
      tags:
        - Post
      summary: List posts
      operationId: listPosts
      produces:
        - application/json
      security:
        - api_key: [ ]
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListPostResponse'
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

    post:
      tags:
        - Post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
      security:
        - api_key: [ ]
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: "#/definitions/CreatePostRequest"
      responses:
        "200":
          description: successfully create user
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

  /posts/{postID}:
    # Get post
    get:
      tags:
        - Post
      summary: Get post
      description: ""
      operationId: getPost
      produces:
        - application/json
      security:
        - api_key: [ ]
      parameters:
        - name: postID
          in: path
          required: true
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/PostInfo"
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

    # Update post
    put:
      tags:
        - Post
      summary: Updated post
      description: This can only be done by the logged in post.
      operationId: updatePost
      produces:
        - application/json
      security:
        - api_key: [ ]
      parameters:
        - name: postID
          in: path
          description: postID
          required: true
          type: string
        - in: body
          name: body
          description: Updated post
          required: true
          schema:
            $ref: "#/definitions/UpdatePostRequest"
      responses:
        "200":
          description: successfully update post
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

    # Delete post
    delete:
      tags:
        - Post
      summary: delete post
      description: delete post
      operationId: deletePost
      produces:
        - application/json
      security:
        - api_key: [ ]
      parameters:
        - name: postID
          in: path
          required: true
          type: string
      responses:
        "200":
          description: successfully delete.
        "400":
          description: request failed due to client-side problem
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: request failed due to server-side problem
          schema:
            $ref: '#/definitions/ErrResponse'

securityDefinitions:
  api_key:
    type: apiKey
    name: Authorization
    in: header

definitions:
  # Error
  ErrResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
        example: 10001/20002
      message:
        type: string
        example: Internal server error./Validation failed.

  # Login request
  LoginRequest:
    required:
      - username
      - password
    type: object
    properties:
      username:
        type: string
        example: root
      password:
        type: string
        format: password
        example: 123123

  # Login response
  LoginResponse:
    type: object
    properties:
      token:
        type: string
        example: xxx.yyy.zzz

  # List user response
  ListUserResponse:
    type: object
    properties:
      totalCount:
        type: integer
        format: int64
        example: 3
      users:
        type: array
        items:
          $ref: '#/definitions/UserInfo'

  # Create user request
  CreateUserRequest:
    required:
      - username
      - password
      - nickname
      - email
      - phone
    type: object
    properties:
      username:
        type: string
        example: test
      password:
        type: string
        format: password
        example: 123123
      nickname:
        type: string
        example: test
      email:
        type: string
        format: email
      phone:
        type: string
        example: 18888888888

  # User info
  UserInfo:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
        format: password
      nickname:
        type: string
      email:
        type: string
        format: email
      phone:
        type: string
        example: 18888888888
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time

  # Update user request
  UpdateUserRequest:
    type: object
    properties:
      nickname:
        type: string
        example: test
      email:
        type: string
        format: email
      phone:
        type: string
        example: 18888888888

  # Change password
  ChangePasswordRequest:
    required:
      - oldPassword
      - newPassword
    type: object
    properties:
      oldPassword:
        type: string
        format: password
        example: 123123
      newPassword:
        type: string
        format: password
        example: 123123

  # Post info
  PostInfo:
    type: object
    properties:
      username:
        type: string
        example: test
      postID:
        type: string
        example: post-22z9jl
      title:
        type: string
        example: 'blog title'
      content:
        type: string
        example: "This is the content of the blog"
      createdAt:
        type: string
        format: date-time
        example: 2023-01-25 00:00:00
      updatedAt:
        type: string
        format: date-time
        example: 2023-01-25 00:00:00

  # List response
  ListPostResponse:
    type: object
    properties:
      totalCount:
        type: integer
        format: int64
        example: 3
      posts:
        type: array
        items:
          $ref: '#/definitions/PostInfo'

  # Create post request
  CreatePostRequest:
    required:
      - title
      - content
    type: object
    properties:
      title:
        type: string
        example: 'blog'
      content:
        type: string
        example: "This is the content"

  # Create post response
  CreatePostResponse:
    type: object
    properties:
      postID:
        type: string
        example: post-22z9jl

  # Update post request
  UpdatePostRequest:
    type: object
    properties:
      title:
        type: string
        example: 'updated blog'
      content:
        type: string
        example: "This is the updated content"
